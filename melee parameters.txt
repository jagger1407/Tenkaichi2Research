The melee parameter file has around 106 attacks in total.
The layout of each one should be the same, at least it was
for me with the ones that I tested. Each attack in this file
has 100 Bytes reserved for it's parameters.

?   = Unknown as of yet
(?) = uncertain

DISCLAIMER: The order of bits for this documentation is 76543210.
So when I refer to "Bit 5", it's the 5th bit from the right, starting from 0.

The Structure of data is as follows:
0xXXXX			= Meaning of Parameter
Size:	X-Bytes
->	Additional Notes



--LAYOUT--

All sections within this layout have a size of 100 (0x64) Bytes.

0x0000			Strike 1 (primary combo string)
0x0064			Strike 2 (primary combo string)
0x00C8			Strike 3 (primary combo string)
0x012C			Strike 4 (primary combo string)
0x0190			Strike 5 (primary combo string)

0x01F4			Strike 1 (secondary combo string)
0x0258			Strike 2 (secondary combo string)
0x02BC			Strike 3 (secondary combo string)
0x0320			Strike 4 (secondary combo string)
0x0384			Strike 5 (secondary combo string)

0x03E8			Heavy Finisher (Low Charge)
0x044C		Heavy Finisher (Medium Charge)
0x04B0			Heavy Finisher (Full Charge)

0x0514			Heavy Crush (1st Hit)
0x0578			Heavy Crush (2nd Hit)
0x05DC			Heavy Crush (3rd Hit)

0x0640			Flying Kicks (Part 1)
->	The damage for the flying kicks work like this:
	the first flying kick damage values amount to
	the damage value you put in split by the animation,
	a.k.a divided by the amount of kicks the char does.
	The very last one however, is at the very bottom
	of this section.

0x06A4			Left Smash (Low Charge)
0x0708			Right Smash (Low Charge)
0x076C			Up Smash (Low Charge)
0x07D0			Down Smash (Low Charge)
0x0834			Neutral Smash (Low Charge)

0x0898		 	Left Smash (Medium Charge)
0x08FC			Right Smash (Medium Charge)
0x0960			Up Smash (Medium Charge)
0x09C4			Down Smash (Medium Smash)
0x0A28			Neutral Smash (Medium Charge)

0x0A8C			Left Smash (Full Charge)
0x0AF0			Right Smash (Full Charge)
0x0B54			Up Smash (Full Charge)
0x0BB8			Down Smash (Full Charge)
0x0C1C			Neutral Smash (Full Charge)

0x0C80			Dash Smash (Low Charge)
0x0CE4			Dash Smash (Medium Charge)
0x0D48			Dash Smash (Full Charge)

0x0DAC			Jump Smash (Low Charge) (?)
0x0E10			Jump Smash (Medium Charge) (?)
0x0E74			Jump Smash (Full Charge) (?)
-> 	When I tested these with Base Goku,
	Low Charge does 10 more damage,
	Medium Charge does 60 more damage
	and Full Charge does 100 more Damage.

0x0ED8			Kiai Cannon (Low Charge)
0x0F3C			Kiai Cannon (Medium Charge)
0x0FA0			Kiai Cannon (Full Charge)

0x1004			Dragon Dash Smash Left (Low Charge)
0x1068			Dragon Dash Smash Right (Low Charge)
0x10CC			Dragon Dash Smash Up (Low Charge)
0x1130			Dragon Dash Smash Down (Low Charge)
0x1194			Dragon Dash Smash Neutral (Low Charge)

0x11F8			Dragon Dash Smash Left (Full Charge)
0x125C			Dragon Dash Smash Right (Full Charge)
0x12C0			Dragon Dash Smash Up (Full Charge)
0x1324			Dragon Dash Smash Down (Full Charge)
0x1388			Dragon Dash Smash Neutral(Full Charge)

0x13EC			Left Dragon Homing (Full Smash Square Follow-Up)
0x1450			Right Dragon Homing (Full Smash Square Follow-Up)
0x14B4			Up Dragon Homing (Full Smash Square Follow-Up)
0x1518			Down Dragon Homing (Full Smash Square Follow-Up)
0x157C			Neutral Dragon Homing (Full Smash Square Follow-Up)

0x15E0			Left Punishing Attack (Full Smash Triangle Follow-Up)
0x1644			Right Punishing Attack (Full Smash Triangle Follow-Up)
0x16A8			Up Punishing Attack (Full Smash Triangle Follow-Up)
0x170C			Down Punishing Attack (Full Smash Triangle Follow-Up)

0x1770			?

0x17D4			Lift Strike (Low Charge)
0x1838			Lift Strike (Medium Charge)
0x189C			Lift Strike (Full Charge)

0x1900			Ground Slash (Low Charge)
0x1964			Ground Slash (Medium Charge)
0x19C8			Ground Slash (Full Charge)

0x1A2C			Strike 1 Air Combo (Lift Strike Follow-Up)
0x1A90			Strike 2 Air Combo (Lift Strike Follow-Up)
0x1AF4			Strike 3 Air Combo (Lift Strike Follow-Up)
0x1B58			Strike 4 Air Combo (Lift Strike Follow-Up)
0x1BBC			Strike 5 Air Combo (Lift Strike Combo Finisher)
0x1C20			Air Combo Heavy Finisher (Combo Ender)
0x1C84			Lift Strike Heavy Follow-Up

0x1CE8			Throw/Grab
0x1D4C			?
0x1DB0			?

0x1E14			Counter-Attack

0x1E78			Kiai Cannon Smash

0x1EDC			?

0x1F40			Rolling Hammer Left (Low Charge)
0x1FA4			Rolling Hammer Right (Low Charge)
0x2008			Rolling Hammer Left (Medium Charge)
0x206C			Rolling Hammer Right (Medium Charge)
0x20D0			Rolling Hammer Left (Full Charge)
0x2134			Rolling Hammer Right (Full Charge)

0x2198			?
0x21FC			?
0x2260			?
0x22C4			?
0x2328			?
0x238C			Sonic Impact (1st Hit)
0x23F0			Sonic Impact (2nd Hit)
0x2454			?

0x24B8			Strike 1 Dragon Tornado (Ground Slash Follow-Up)
0x251C			Strike 2 Dragon Tornado (Ground Slash Follow-Up) (?)
->	The damage value put in here seems to be halved.
	Maybe split by animation as well?
0x2580			Strike 3 Dragon Tornado (Ground Slash Follow-Up)

0x25E4			?
0x2648			?
0x26AC			?
0x2710			?
0x2774			?
0x27D8			?

0x283C			Dragon Heavy
0x28A0			MAX Power Combo Hit (Dragon Heavy Follow-up)

0x2904			Flying Kicks (Part 2)
->	The last flying kick, for some reason, is also the last attack in this file.
	The damage here, just as above, is split by animation,
	so it will be divided by the amount of kicks your char does.


--STRUCTURE--


0x0000		= Flags
Size: 4 Bytes
->	Bit 0 = Is teleportable	
	Bit 9 = Enter secondary melee set
	Bit 10 = Opponent loses Lock-On
	

0x0004		 	= Damage
Size: 4 Bytes

0x0008		 	= Damage (Guarding)
Size: 4 Bytes

0x000C		 	= Ki Damage
Size: 4 Bytes

0x0010		 	= Ki Gain
Size: 4 Bytes

0x0014		 	= Throw Entry Damage
Size: 4 Bytes
->	The Damage that the opponent will receive
	upon successfully connecting the throw.
Note: Only used by the Throw attack.
	

0x0018		 	= Throw Ki Damage
Size: 4 Bytes
->	The Ki that will be subtracted from the opponent 
	upon successfully connecting the throw.
Note: Only used by the Throw attack.

0x001C			= ?
Size: 4 Bytes

0x0020			= Hitstun
Size: 1 Byte
->	00 = no Hitstun
	01 = no Hit
	02 = no Hitstun
	03 = Hitstun (Primary String)
	04 = Hitstun (Secondary String)
	05 = Right Smash Stun
	06 = Left Smash Stun
	07 = Neutral Smash Stun
	08 = Down Smash Stun
	09 = Kiai Cannon/Dash Smash Stun
	0A = Lift Strike Stun
	0B = Ground Slash Stun
	0C = Heavy Finisher Stun
	0D = Instant Knockdown
	0E = Knockdown with Knockback
	0F = Combo Ender
	10 = Full Charge Smash Stun
	11 = Medium Charge Smash Stun
	12 = Throw Animation, opponent flies into facing direction
	13 = No Hitstun
	14 = Giant Throw Animation, same effect as 12
	15 = Paralyzation (Short)
	16 = Paralyzation (Medium)
	17 = Paralyzation (Long)
	18 = Knockdown Paralyzation (Short)
	19 = Knockdown Paralyzation (Medium)
	1A = Knockdown Paralyzation (Long)
	1B = (?) Blast 2 Animation, darkens Stage and inflicts self-damage
	1C = (?) Blast 1 Animation, temporarily removes radar and knocks down opponent
	1D = Instant Knockdown
	1E = Instant Knockdown + small bounce
	1F = Instant Knockdown + big bounce
	20 = Opponents Blast 2 Animation, then crashes
	21 = Rolling Hammer Right
	22 = Rolling Hammer Left
	23 = (?) idk, seems to be another Giant Throw Animation
	24 = Death Beam Knockdown
	25 = (?) Dragon Heavy Hitstun 
	26 = (?) Full Charged Down Smash Stun
	27 = (?) Instant Knockdown with electric sound

0x0021 			= Conditional Hitstun (?)
Size: 1 Byte
->	It is hidden inside of if-conditions, however,
	this parameter might be used to set the
	displayed animation in the source code.

0x0022 			= Conditional Hitstun (?)
Size: 1 Byte
->	It is hidden inside of if-conditions, however,
	this parameter might be used to set the
	displayed animation in the source code.

0x0023 			= Conditional Hitstun (?)
Size: 1 Byte
->	It is hidden inside of if-conditions, however,
	this parameter might be used to set the
	displayed animation in the source code.

0x0024			 = Conditional Hitstun (?)
Size: 1 Byte
->	It is hidden inside of if-conditions, however,
	this parameter might be used to set the
	displayed animation in the source code.

0x0025			= ?
Size: 1 Byte
-> Function at 0x0023EF28 uses this as its offset.

0x0026 			= Conditional Hitstun (?)
Size: 1 Byte
->	It is hidden inside of if-conditions, however,
	this parameter might be used to set the
	displayed animation in the source code.

0x0027 			= Conditional Hitstun (?)
Size: 1 Byte
->	It is hidden inside of if-conditions, however,
	this parameter might be used to set the
	displayed animation in the source code.

0x0028 			= Visual Effects
Size: 1 Byte
->	00 = No Visual Effect
	01 = regular strike
	02 = Smash effect
	03 = Heavy Finisher effect
	04 = (?) no effect
	05 = (?) no effect
	06 = (?) regular strike
	07 = (?) bigger regular strike
	08 = (?) Clash/Heavy Crush end effect
	09 = (?) no effect
	0A = (?) no effect
	0B = Kiai effect
	0C = (?) no effect
	0D = Lift Strike effect
	0E = (?) no effect
	0F = Ground Slash effect
	10 = idk some white flash, a little less bright than Kiai (?)

0x0029 			= Sound Effects
Size: 1 Byte
->	00 = No Sound
	01 = regular strike
	02 = Heavy Finisher
	03 = Throw
	04 = Lift Strike
	05 = Giant Throw
	06 = (?) Great Ape Throw
	07 = (?) Heavy Crush Ending Sound
	08 = (?) some Great Ape attack sound probably idk
	09 = Ground Slash sound
	0A = (?) same as 09
	0B = (?) Lift Strike sound
	0C = (?) Rolling Hammer sound

0x002A 			= ?
Size: 1 Byte

0x002B = Padding(?) 
Size: 1 Byte
->	Isn't used anywhere from what I can tell,
	Could very well just be padding.

0x002C  		= Opponent Knockback
Size: 4 Bytes
->	This value is a Float.

0x0030  		= ?
Size: 4 Bytes
->	This value is a Float.

0x0034  		= Attack Reach
Size: 4 Bytes
->	This value is a Float.
    This controls how far you slide
    while the attack animation plays.

0x0038  		= ?
Size: 4 Bytes
->	This value is a Float.

0x003C  		= ?
Size: 4 Bytes
->	This value is a Float.

0x0040  		= ?
Size: 4 Bytes
->	This value is a Float.
	Additionally, it will be divided by 180,
	then multiplied by some global value.

0x0044  		= ?
Size: 4 Bytes
->	This value is a Float.
	Additionally, it will be divided by 180,
	then multiplied by some global value.

0x0048  		= ?
Size: 4 Bytes
->	This value is a Float.

0x004C  		= ?
Size: 4 Bytes
->	This value is a Float.

0x0050  		= ?
Size: 4 Bytes
->	This value is a Float.

0x0054  		= ?
Size: 4 Bytes
->	This value is a Float.

0x0058  		= ?
Size: 4 Bytes
->	This value is a Float.

0x005C  		= ?
Size: 1 Byte

0x005D  		= ?
Size: 1 Byte

0x005E  		= ?
Size: 1 Byte

0x005F  		= ?
Size: 1 Byte

0x0060  		= Effect on Guard
Size: 1 Byte
->	00 = regular effect
	01 = Guard Break
	02 = Combo Breaker
	03 = ignores Guard
	04 = same effect as throw counter (like 02 but opponent isn't stunned?)
	05 = Attack Misses

0x0061  		= Effect on Counter Stance
Size: 1 Byte
->	00 = Counter acts like Guard	
	01 = Guard Break (Counter Stance isn't Broken)
	02 = Combo Breaker
	03 = ignores counter stance
	04 = regular Counter effect
	05 = Attack Misses

0x0062  		= Guard Type
Size: 1 Byte
->	00 = regular guard effect
	01 = Great Ape-style guard stun
Note: This will overwrite the hitstun.
	
0x0063	  		= Padding (?)
